name: 'KoG Map Workflow'
description: 'The official KoG maps workflow'

inputs:
  maps:
    description: 'The maps to be tested'
    required: true
    default: "Aip-Gores.map"
  GITHUB_TOKEN:
    type: string
    description: Github token passed from calling workflow
    required: true
  GITHUB_REPOSITORY:
    type: string
    description: Github repository from the from calling workflow
    required: true
  action:
    description: 'Which action to run'
    type: string
    required: false
    default: "check"

outputs:
  status:
    description: 'Returns a markdown string'
    value: ${{ steps.map-workflow-output.outputs.status }}

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Cache the virtualenv
      uses: actions/cache@v4
      with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/uv.lock') }}

    - name: Install the project
      shell: bash
      run: |
        uv sync --all-extras --dev
      working-directory: ${{ github.action_path }}

    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.GITHUB_REPOSITORY }}
        token: ${{ inputs.GITHUB_TOKEN }}

    - name: Get the result
      id: map-workflow-output
      run: |
        IFS=',' read -ra FILES <<< "${{ inputs.maps }}"
        overall_status=0
        status_message=""
        
        case ${{ inputs.action }} in
          check)
            for file in "${FILES[@]}"; do
              if [[ $file == *.map ]]; then
                uv run maps_workflow/main.py --ci --action check --map ${{ github.workspace }}/$file >> $GITHUB_STEP_SUMMARY 2>&1

                if [ $? -ne 0 ]; then
                  overall_status=1
                fi
              fi
            done
            ;;

          generate_votes)
            uv run maps_workflow/main.py --ci --action generate_votes --map ${{ github.workspace }}/$file >> $GITHUB_STEP_SUMMARY 2>&1
            overall_status=$?
            ;;
          
          check_if_vote_exists)
            uv run maps_workflow/main.py --ci --action check_if_vote_exists --mapscsv ${{ github.workspace }}/maps.csv >> $GITHUB_STEP_SUMMARY 2>&1
            overall_status=$?
            ;;
          
          *)
            echo "❌ Invalid action defined!" >> $GITHUB_STEP_SUMMARY
            overall_status=1
            ;;
        esac

        {
          echo "status<<EOF"
          echo "$(cat $GITHUB_STEP_SUMMARY)"
          echo "EOF";
        } >> $GITHUB_OUTPUT

        # Exit with the overall status
        # exit $overall_status
      shell: bash
      working-directory: ${{ github.action_path }}

    - name: Install Rust
      if: ${{ success() }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal

    - name: Install twgpu-tools
      if: ${{ success() }}
      shell: bash
      run: cargo install twgpu-tools

    - name: Create map screenshots
      if: ${{ success() }}
      shell: bash
      run: |
        IFS=',' read -ra FILES <<< "${{ inputs.maps }}"
        for file in "${FILES[@]}"; do
          if [[ $file == *.map ]]; then
            echo "Rendering $file."
            twgpu-map-photography "$file" || echo "Failed to render $file"
          fi
        done
      working-directory: ${{ github.workspace }}

    - name: Upload screenshots as artifact
      if: ${{ success() }}
      uses: actions/upload-artifact@v4
      with:
        name: map-screenshots
        path: ./*.png
